name: Release

on:
  workflow_dispatch:
    inputs:
      releaseType:
        description: 'Release type (patch, minor, major)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      dryRun:
        description: 'Dry run (no actual release)'
        required: false
        default: false
        type: boolean
      firstRelease:
        description: 'First release (use for initial version)'
        required: false
        default: false
        type: boolean

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensures full git history is available

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Configure Git
        run: |
          git config --global user.name "Monorail Updater"
          git config --global user.email "monorail-updater@users.noreply.github.com"

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false
          
      - name: Setup pnpm cache
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install Dependencies
        # Using --shamefully-hoist to ensure dependencies are available at top level
        # Using --no-strict-peer-dependencies to handle peer dependencies
        run: pnpm install --no-frozen-lockfile --no-strict-peer-dependencies --shamefully-hoist

      - name: Run Nx Release (version bump and git tag only)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: pnpm nx release ${{ github.event.inputs.releaseType }} ${{ github.event.inputs.dryRun == 'true' && '--dry-run' || '' }} ${{ github.event.inputs.firstRelease == 'true' && '--first-release' || '' }}

      - name: Get Package Version
        if: ${{ github.event.inputs.dryRun != 'true' }}
        id: package_version
        run: |
          VERSION=$(node -p "require('./apps/huckleberry-extension/package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Package version: $VERSION"

      - name: Package VS Code Extension
        if: ${{ github.event.inputs.dryRun != 'true' }}
        run: |
          # Use the package:extension script that works locally
          pnpm package:extension
          
      - name: List Generated VSIX
        if: ${{ github.event.inputs.dryRun != 'true' }}
        run: |
          echo "Looking for generated VSIX file:"
          find apps/huckleberry-extension -name "*.vsix" -type f

      - name: Create GitHub Release
        if: ${{ github.event.inputs.dryRun != 'true' }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.package_version.outputs.version }}
          name: Release v${{ steps.package_version.outputs.version }}
          draft: false
          prerelease: false
          files: apps/huckleberry-extension/huckleberry-extension-*.vsix
          generate_release_notes: true
          body: |
            ## Huckleberry Extension v${{ steps.package_version.outputs.version }}
            
            ### Installation
            Download the VSIX file and install it manually in VS Code:
            - Go to Extensions view (Ctrl+Shift+X)
            - Click on "..." (More Actions) > "Install from VSIX..."
            - Select the downloaded VSIX file
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
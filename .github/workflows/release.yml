name: Release

on:
  workflow_dispatch:
    inputs:
      releaseType:
        description: 'Release type (patch, minor, major)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      dryRun:
        description: 'Dry run (no actual release)'
        required: false
        default: false
        type: boolean
      firstRelease:
        description: 'First release (use for initial version)'
        required: false
        default: false
        type: boolean

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Create installation token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id:       ${{ secrets.APP_ID }}
          private-key:  ${{ secrets.APP_PRIVATE_KEY }}

      - name: Checkout with app token
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensures full git history is available
          token: ${{ steps.app-token.outputs.token }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Configure Git
        run: |
          git config --global user.name "Monorail Updater"
          git config --global user.email "monorail-updater@users.noreply.github.com"

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false
          
      - name: Setup pnpm cache
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install Dependencies
        # Using --shamefully-hoist to ensure dependencies are available at top level
        # Using --no-strict-peer-dependencies to handle peer dependencies
        run: pnpm install --no-frozen-lockfile --no-strict-peer-dependencies --shamefully-hoist

      - name: Run Nx Release (version bump and git tag only)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: pnpm nx release ${{ github.event.inputs.releaseType }} ${{ github.event.inputs.dryRun == 'true' && '--dry-run' || '' }} ${{ github.event.inputs.firstRelease == 'true' && '--first-release' || '' }}

      - name: Get Package Version
        if: ${{ github.event.inputs.dryRun != 'true' }}
        id: package_version
        run: |
          VERSION=$(node -p "require('./apps/huckleberry-extension/package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Package version: $VERSION"
          
      - name: Update Root Package.json Version
        if: ${{ github.event.inputs.dryRun != 'true' }}
        run: |
          # Get the version from extension's package.json
          VERSION=$(node -p "require('./apps/huckleberry-extension/package.json').version")
          
          # Update root package.json version
          node -e "
            const fs = require('fs');
            const packageJson = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
            packageJson.version = '$VERSION';
            fs.writeFileSync('./package.json', JSON.stringify(packageJson, null, 2) + '\n');
            console.log('Updated root package.json to version $VERSION');
          "
          
          # Commit the updated package.json
          git add package.json
          git commit -m "chore(release): sync root package version to $VERSION" || echo "No changes to commit"
          git push origin HEAD:${GITHUB_REF#refs/heads/}

      - name: Extract Changes From Changelog
        if: ${{ github.event.inputs.dryRun != 'true' }}
        id: extract_changes
        run: |
          VERSION=${{ steps.package_version.outputs.version }}
          # Use awk to extract the content between the current version header and the next version header
          # This accounts for the date format in the CHANGELOG.md headers: "## x.y.z (date)"
          CHANGES=$(awk -v version="## $VERSION \\(" '
            BEGIN { found=0; content=""; }
            $0 ~ "^## " { 
              if (found == 1) { exit }
              if ($0 ~ version) { found=1; next }
            }
            found == 1 { content = content $0 "\n"; }
            END { print content; }
          ' CHANGELOG.md)
          
          # Escape newlines and special characters for GitHub Actions
          CHANGES="${CHANGES//'%'/'%25'}"
          CHANGES="${CHANGES//$'\n'/'%0A'}"
          CHANGES="${CHANGES//$'\r'/'%0D'}"
          
          echo "changes<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Package VS Code Extension
        if: ${{ github.event.inputs.dryRun != 'true' }}
        run: |
          # Use the package:extension script that works locally
          pnpm package:extension
          
      - name: List Generated VSIX
        if: ${{ github.event.inputs.dryRun != 'true' }}
        run: |
          echo "Looking for generated VSIX file:"
          find apps/huckleberry-extension -name "*.vsix" -type f

      - name: Create GitHub Release
        if: ${{ github.event.inputs.dryRun != 'true' }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.package_version.outputs.version }}
          name: Release v${{ steps.package_version.outputs.version }}
          draft: false
          prerelease: false
          files: apps/huckleberry-extension/vscode-copilot-huckleberry-*.vsix
          generate_release_notes: true
          body: |
            ## Huckleberry Extension v${{ steps.package_version.outputs.version }}
            
            ### What's Changed
            
            ${{ steps.extract_changes.outputs.changes }}
            
            ### Installation
            Download the VSIX file and install it manually in VS Code:
            - Go to Extensions view (Ctrl+Shift+X)
            - Click on "..." (More Actions) > "Install from VSIX..."
            - Select the downloaded VSIX file
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}